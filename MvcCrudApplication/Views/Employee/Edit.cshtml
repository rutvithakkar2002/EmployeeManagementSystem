@*@model MvcCrudApplication.Models.Employee*@
@model MvcCrudApplication.Models.ViewModel
@{
    ViewBag.Title = "Edit";
}
<h2>Edit Employee</h2>
<style>
    .multiselect {
        width: 200px;
    }

    .selectBox {
        position: relative;
    }

        .selectBox select {
            width: 150%;
            font-weight: bold;
        }

    .overSelect {
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
    }

    #checkboxes {
        display: none;
        border: 1px #dadada solid;
    }

        #checkboxes label {
            display: block;
        }
            #checkboxes label:hover {
                background-color: #1e90ff;
            }
</style>

<!--<form action="Updatedata" method="post"> -->

@using (Html.BeginForm("Edit", "Employee", FormMethod.Post, new { enctype = "multipart/form-data", id = "myFormId" }))
{
    <div class="form-horizontal">

        <hr />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Employee.EmployeeId)

        <div class="form-group">
            @Html.LabelFor(model => model.Employee.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Employee.FirstName, new { htmlAttributes = new { @class = "form-control", @required = "required" } } )
                @*@Html.ValidationMessageFor(model => model.EmployeeViewModel.FirstName, "", new { @class = "text-danger" })*@
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>
        <br />
        <div class="form-group">
            @Html.LabelFor(model => model.Employee.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Employee.LastName, new { htmlAttributes = new { @class = "form-control" , @required = "required" } })
                @*@Html.ValidationMessageFor(model => model.EmployeeViewModel.LastName, "", new { @class = "text-danger" })*@
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })

            </div>
        </div>
        <br />

        <div class="form-group">
            @Html.LabelFor(model => model.Employee.EmailAddress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Employee.EmailAddress, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                @*@Html.ValidationMessageFor(model => model.EmployeeViewModel.EmailAddress, "", new { @class = "text-danger" })*@
                @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })

            </div>
        </div>

        <br />
        <div class="form-group">
            @Html.LabelFor(model => model.Employee.MobileNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Employee.MobileNumber, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                @*@Html.ValidationMessageFor(model => model.EmployeeViewModel.MobileNumber, "", new { @class = "text-danger" })*@
                @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })

            </div>
        </div>
        <br />
        @*<div class="form-group">
            @Html.LabelFor(model => model.Employee.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Employee.Gender, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Employee.Gender, "", new { @class = "text-danger" })
            </div>
        </div>*@

    <div class="form-group">
        @Html.RadioButtonFor(m => m.Employee.Gender, "Male") Male
        @Html.RadioButtonFor(m => m.Employee.Gender, "Female")Female

        @*@Html.ValidationMessageFor(model => model.EmployeeViewModel.Gender, "", new { @class = "text-danger" })*@
        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
    </div>


        <br />

        <div class="form-group">
            @Html.LabelFor(model => model.Employee.Address, htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Employee.Address, new
           {
               @class = "form-control",
               @rows = 5,
               @cols = 40,
               style = "border: 1px solid #ccc;",
               @required = "required"
           })
                @*@Html.ValidationMessageFor(model => model.EmployeeViewModel.Address, "", new { @class = "text-danger" })*@
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })

            </div>
        </div>
        <br />
        @*<tr>
            <td>
                <label>Department</label>
            </td>
            <td>
                <select name="DepartmentIds[]" multiple="multiple" required>
                    <option disabled selected>--Choose Department--</option>
                    @foreach (var item in Model.Departments)
                    {
                        <option value="@item.DepartmentId">@item.DepartmentName</option>
                    }
                </select>
            </td>
        </tr>*@

        @*<label>Select DepartmentNames</label>
        <br />
        <div class="dropdown">
            <button class="btn" onclick="toggleDropdown()">Select Options</button>
            <div class="dropdown-content" id="dropdownContent">
                @foreach (var item in Model.Departments)
                {
                    <label><input type="checkbox" value="@item.DepartmentId">@item.DepartmentName</label><br>
                }
            </div>
        </div>*@

        <div>
            <tr>
                <td>
                    <label>Change profile image</label>

                </td>

                <td>

                    <img src="@Model.Employee.ProfileImage" alt="Your Image" />
                    <input type="file" name="ProfileImage" enctype="multipart/form-data" required />

                    @*@Html.ValidationMessageFor(model => model.EmployeeViewModel.ProfileImage, "", new { @class = "text-danger" })*@
                    @Html.ValidationMessageFor(model => model.ProfileImage, "", new { @class = "text-danger" })
                </td>

            </tr>

        </div>
        <br />

        <label>Select DepartmentNames</label>
        <div class="multiselect">
            <div class="selectBox" onclick="showCheckboxes()">
                <select required>
                    <option>Select an option</option>
                </select>

                <div class="overSelect"></div>
            </div>

            <input type="hidden" id="DepartmentIds" name="DepartmentIds" />
            <div id="checkboxes">
                @foreach (var item in Model.Departments)
                {
                    bool isSelected = Model.PreselectedDepartmentIds != null && Model.PreselectedDepartmentIds.Contains(item.DepartmentId); // Check if the department should be preselected

                    <label>
                        <input type="checkbox" value=" @item.DepartmentId " onchange="updateSelectedValues()" @(isSelected ? "checked" : "") />@item.DepartmentName
                    </label>
                }
            </div>
            @*@Html.ValidationMessageFor(model => model.EmployeeViewModel.DepartmentIds, "", new { @class = "text-danger" })*@
            @Html.ValidationMessageFor(model => model.PreselectedDepartmentIds, "", new { @class = "text-danger" })

        </div>
        <br />

        @*@Html.DropDownListFor(model => model.DepartmentId,Model.Department, "--Select --", new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "text-danger" })*@
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="button" id="submitbtn" class="btn btn-primary" style="display: inline-block; background-color: black; padding: 20px; width: 130px; color: #ffffff; text-align: center;" onclick="calleditmethod()">Save</button> </div>
        </div>
    </div>
}

<script>
    var expanded = false;
    var DepartmentIds = [];
    

    function showCheckboxes() {
        var checkboxes = document.getElementById("checkboxes");
        if (!expanded) {
            checkboxes.style.display = "block";
            expanded = true;
        } else {
            checkboxes.style.display = "none";
            expanded = false;
        }
    } 
    function updateSelectedValues() {
        debugger;
      // Clear the array before updating it
        var checkboxes = document.querySelectorAll('input[type="checkbox"]');
        for (var i = 0; i < checkboxes.length; i++) {
            if (checkboxes[i].checked) {
                DepartmentIds.push(checkboxes[i].value);
            }
        }
        DepartmentIds = DepartmentIds.filter((value, index, array) => array.indexOf(value) === index);

        console.log(DepartmentIds); 
      //  console.log(DepartmentIds); 
        //calleditmethod()
    }
    function calleditmethod() {

        var formData = new FormData($('#myFormId')[0]); // Serialize the form data
        debugger;
        // Add the DepartmentIds to the formData
        formData.append("DepartmentIds", DepartmentIds);

       // formData.append("DepartmentIds", DepartmentIds);
       // console.log(formData);


        //var FirstName = document.getElementById("FirstName").value;
        //var LastName = document.getElementById("LastName").value;

        //if (FirstName === null || FirstName.trim() === "") {
        //    alert("FirstName can't be blank");
        //    return false;
        //} else if (LastName === null || LastName.trim() === "") {
        //    alert("LastName can't be blank");
        //    return false;
        //}


        $.ajax({
            url: '/Employee/Edit', // Replace with your controller and action name
            type: 'POST',
            data: formData,
            traditional: true,
            contentType: false, 
            processData: false,
            success: function (data) {
                if (data.success) {
                    alert(data.message); // Display the success message
                    // Redirect to the specified URL
                    window.location.href = data.redirect;
                } else {
                    // Handle errors here
                    console.error(data.message);
                }
            },
            error: function (error) {
                // Handle any errors
                console.error(error);
            }
        });
    }
</script>


