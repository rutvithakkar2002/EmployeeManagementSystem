@*@model MvcCrudApplication.Models.Employee*@
@model MvcCrudApplication.Models.ViewModel
@{
    ViewBag.Title = "Edit";
}

<!-- Include jQuery Validation Plugin -->
<!-- Include jQuery library -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/jquery.validation/1.19.3/jquery.validate.min.js"></script>

<h2>Edit Employee</h2>
<style>
    .multiselect {
        width: 200px;
    }

    .selectBox {
        position: relative;
    }

        .selectBox select {
            width: 150%;
            font-weight: bold;
        }

    .overSelect {
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
    }

    #checkboxes {
        display: none;
        border: 1px #dadada solid;
    }

        #checkboxes label {
            display: block;
        }

            #checkboxes label:hover {
                background-color: #1e90ff;
            }

    .error {
        color: red; /* Set the color for error messages to red */
    }
</style>

<!--<form action="Updatedata" method="post"> -->

@using (Html.BeginForm("Edit", "Employee", FormMethod.Post, new { enctype = "multipart/form-data", id = "myFormId" }))
{
    <div class="form-horizontal">

        <hr />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Employee.EmployeeId)

        <div class="form-group">
            @Html.LabelFor(model => model.Employee.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Employee.FirstName, new { htmlAttributes = new { @class = "form-control", @required = "required", id = "FirstName", name = "FirstName" } })
                @*@Html.ValidationMessageFor(model => model.EmployeeViewModel.FirstName, "", new { @class = "text-danger" })*@
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                <span id="FirstNameValidation" class="text-danger"></span>

            </div>
        </div>
        <br />
        <div class="form-group">
            @Html.LabelFor(model => model.Employee.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Employee.LastName, new { htmlAttributes = new { @class = "form-control", @required = "required", id = "LastName", name = "LastName" } })
                @*@Html.ValidationMessageFor(model => model.EmployeeViewModel.LastName, "", new { @class = "text-danger" })*@
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                <span id="LastNameValidation" class="text-danger"></span>

            </div>
        </div>
        <br />

        <div class="form-group">
            @Html.LabelFor(model => model.Employee.EmailAddress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Employee.EmailAddress, new { htmlAttributes = new { @class = "form-control", @required = "required", id = "EmailAddress", name = "EmailAddress" } })
                @*@Html.ValidationMessageFor(model => model.EmployeeViewModel.EmailAddress, "", new { @class = "text-danger" })*@
                @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
                <span id="EmailAddressValidation" class="text-danger"></span>
            </div>
        </div>

        <br />
        <div class="form-group">
            @Html.LabelFor(model => model.Employee.MobileNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Employee.MobileNumber, new { htmlAttributes = new { @class = "form-control", @required = "required", id = "MobileNumber", name = "MobileNumber" } })
                @*@Html.ValidationMessageFor(model => model.EmployeeViewModel.MobileNumber, "", new { @class = "text-danger" })*@
                @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })
                <span id="MobileNumberValidation" class="text-danger"></span>

            </div>
        </div>
        <br />
        @*<div class="form-group">
                @Html.LabelFor(model => model.Employee.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Employee.Gender, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Employee.Gender, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            @Html.RadioButtonFor(m => m.Employee.Gender, "Male", new { id = "maleRadio" }) Male
            @Html.RadioButtonFor(m => m.Employee.Gender, "Female", new { id = "femaleRadio" })Female
            <span id="genderValidation" class="text-danger"></span>
            @*@Html.ValidationMessageFor(model => model.EmployeeViewModel.Gender, "", new { @class = "text-danger" })*@
            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
        </div>

        <br />

        <div class="form-group">
            @Html.LabelFor(model => model.Employee.Address, htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Employee.Address, new
           {
               @class = "form-control",
               @rows = 5,
               @cols = 40,
               style = "border: 1px solid #ccc;",
               @required = "required",
               id = "Address",
               name="Address"
           })
                @*@Html.ValidationMessageFor(model => model.EmployeeViewModel.Address, "", new { @class = "text-danger" })*@
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                <span id="AddressValidation" class="text-danger"></span>

            </div>
        </div>
        <br />
        @*<tr>
                <td>
                    <label>Department</label>
                </td>
                <td>
                    <select name="DepartmentIds[]" multiple="multiple" required>
                        <option disabled selected>--Choose Department--</option>
                        @foreach (var item in Model.Departments)
                        {
                            <option value="@item.DepartmentId">@item.DepartmentName</option>
                        }
                    </select>
                </td>
            </tr>*@

        @*<label>Select DepartmentNames</label>
            <br />
            <div class="dropdown">
                <button class="btn" onclick="toggleDropdown()">Select Options</button>
                <div class="dropdown-content" id="dropdownContent">
                    @foreach (var item in Model.Departments)
                    {
                        <label><input type="checkbox" value="@item.DepartmentId">@item.DepartmentName</label><br>
                    }
                </div>
            </div>*@

        <div>
            <tr>
                <td>
                    <label>Change profile image</label>

                </td>

                <td>

                    <img src="@Model.Employee.ProfileImage" alt="Your Image" />
                    <input type="file" name="ProfileImage" id="fileInput" enctype="multipart/form-data" required accept=".jpg, .jpeg, .png, .gif" />
                    <div id="fileValidationMessage" class="text-danger"></div>

                    @*@Html.ValidationMessageFor(model => model.EmployeeViewModel.ProfileImage, "", new { @class = "text-danger" })*@
                    @Html.ValidationMessageFor(model => model.ProfileImage, "", new { @class = "text-danger" })
                </td>

            </tr>

        </div>
        <br />

        <label>Select DepartmentNames</label>
        <div class="multiselect">
            <div class="selectBox" onclick="showCheckboxes()">
                <select id="departmentSelect" required>
                    <option>Select an option</option>
                </select>

                <div class="overSelect"></div>
            </div>

            <input type="hidden" id="DepartmentIds" name="DepartmentIds" />
            <div id="checkboxes">
                @foreach (var item in Model.Departments)
                {
                    bool isSelected = Model.PreselectedDepartmentIds != null && Model.PreselectedDepartmentIds.Contains(item.DepartmentId); // Check if the department should be preselected

                    <label>
                        <input type="checkbox" value=" @item.DepartmentId " onchange="updateSelectedValues()" @(isSelected ? "checked" : "") />@item.DepartmentName
                    </label>
                }
            </div>
            @*@Html.ValidationMessageFor(model => model.EmployeeViewModel.DepartmentIds, "", new { @class = "text-danger" })*@
            @Html.ValidationMessageFor(model => model.PreselectedDepartmentIds, "", new { @class = "text-danger" })

        </div>
        <br />

        @*@Html.DropDownListFor(model => model.DepartmentId,Model.Department, "--Select --", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "text-danger" })*@
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="button" id="submitbtn" class="btn btn-primary" style="display: inline-block; background-color: black; padding: 20px; width: 130px; color: #ffffff; text-align: center;">Save</button>
            </div>
        </div>
    </div>
}

<script>
    $(document).ready(function () {
        debugger;
        $("#myFormId").validate({
            rules: {
                FirstName: {
                    required: true
                },
                LastName: {
                    required: true,
                    digits: true
                },
                EmailAddress: {
                    required: true,
                    email: true
                },
                MobileNumber: {
                    required: true,
                    minlength: 10,
                    maxlength: 10,
                    digits: true
                },
                Address: {
                    required: true,
                    maxlength: 1000
                },
                'Employee.Gender': {
                    required: true
                },

                //fileInput: {
                //    required: true,
                //    accept: "image/*", // Allow only image files
                //    filesize: 1048576 // 1 MB (adjust as needed)
                //},

                ProfileImage: {
                    required: function (element) {
                        // Check if the file input is not empty (file is chosen)
                        return element.files.length > 0 || $("#fileInput").data("fileExists");
                    },
                    accept: "image/*", // Allow only image files
                    filesize: 1048576, // 1 MB (adjust as needed)
                    depends: function (element) {
                        // Check if the file input is not empty (file is chosen)
                        return element.files.length > 0 || $("#fileInput").data("fileExists");
                    }
                },
                'DepartmentIds': {
                    required: function (element) {
                        // Check if at least one checkbox is checked
                        return $("input[name='DepartmentIds']:checked").length > 0;
                    }
                }         
            },
            messages: {
                FirstName: {
                    required: "Please enter first name",
                },
                LastName: {
                    required: "Please enter Last name",
                },
                EmailAddress:
                {
                    required: "Please enter email address",
                    email: "Please enter a valid email address.",
                },
                MobileNumber:
                {
                    required: "Please enter phone number",
                    digits: "Please enter valid phone number(numeric only)",
                    minlength: "Phone number field accept only 10 digits",
                    maxlength: "Phone number field accept only 10 digits",
                },
                Address:
                {
                    required: "Please enter Address",
                },
                ProfileImage: {
                    accept: "Please select a valid image file (e.g., JPG, PNG, GIF)",
                    filesize: "File size must not exceed 1 MB"
                },
                'DepartmentIds[]': {
                    required: "Please select at least one department."
                },
            },
            errorClass: "error"
        });
        // Bind the validation to the form's submit event
        $("#submitbtn").click(function (event) {
            if (!$("#myFormId").valid()) {
                event.preventDefault(); // Prevent form submission if validation fails
            } else {
                calleditmethod();
            }
        });
    });

    //jQuery(document).ready(function () {
    //    jQuery("#myFormId").validate({
    //        rules: {
    //            FirstName: 'required',
    //            LastName: 'required',
    //            EmailAddress: {
    //                required: true,
    //                email: true, // Add an email rule that ensures the value entered is a valid email address.
    //                maxlength: 255 // Remove the trailing comma
    //            }
    //        }
    //    });
    //});

    //        // Add a click event handler to the "submitbtn" button
    //        $("#submitbtn").click(function () {
    //            // Trigger the form validation
    //            if ($("#myFormId").valid()) {
    //                // The form is valid, you can submit it here or perform other actions
    //                alert("Form is valid, you can submit it.");
    //            }
    //            else {
    //                alert("Form is not valid, fill it Properly!!");
    //            }
    //        });
    //    });
    //}
    // $("#myFormId").validate();

    //document.getElementById("submitbtn").addEventListener("click", function (event) {
    //    debugger;
    //    var FirstName = document.getElementById("FirstName").value;
    //    var LastName = document.getElementById("LastName").value.trim();
    //    var EmailAddress = document.getElementById("EmailAddress").value.trim();
    //    var MobileNumber = document.getElementById("MobileNumber").value.trim();
    //    var genderValidation = document.getElementById("genderValidation");

    //    var maleRadio = document.getElementById("maleRadio");
    //    var femaleRadio = document.getElementById("femaleRadio");

    //    var Address = document.getElementById("Address").value.trim();

    //    var fileInput = document.getElementById("fileInput");
    //    var fileValidationMessage = document.getElementById("fileValidationMessage");

    //    var departmentSelect = document.getElementById("departmentSelect");

    //    if (!FirstName) {
    //        FirstNameValidation.textContent = "Please Enter FirstName!";
    //       // alert("Please Enter FirstName!");
    //        event.preventDefault(); // Prevent form submission
    //    }
    //    else if (!LastName) {
    //        LastNameValidation.textContent = "Please Enter LastName!";
    //       // alert("Please Enter LastName!");
    //        event.preventDefault(); // Prevent form submission
    //    }

    //    else if (!EmailAddress) {
    //        EmailAddressValidation.textContent = "Please Enter EmailAddress!";
    //       // alert("Please Enter EmailAddress!");
    //        event.preventDefault(); // Prevent form submission
    //    }
    //    else if (!MobileNumber) {
    //        MobileNumberValidation.textContent = "Please Enter MobileNumber";
    //       // alert("Please Enter MobileNumber!");
    //        event.preventDefault(); // Prevent form submission
    //    }
    //    else if (!(maleRadio.checked || femaleRadio.checked)) {
    //        // No radio button is checked, show the validation message
    //        genderValidation.textContent = "Please select a gender";
    //        event.preventDefault(); // Prevent form submission
    //    }
    //    else if (!Address) {
    //        alert("Please Enter Address!");
    //        event.preventDefault(); // Prevent form submission
    //    }
    //    // Check if a file is selected
    //    else if (fileInput.files.length === 0) {
    //        fileValidationMessage.textContent = "Please select a file.";
    //        return;
    //    }
    //    else if (departmentSelect.value === "") {
    //        alert("Please select a department.");
    //        event.preventDefault(); // Prevent form submission
    //    }
    //    //else {
    //    //    // At least one radio button is checked, clear the validation message
    //    //    genderValidation.textContent = "";
    //    //}

    //    // Only submit the form if all validations pass
    //    // Note: You may want to add further validation for the email address format.
    //    else if (FirstName !== "" && LastName !== "" && EmailAddress !== "") {
    //        calleditmethod();
    //       // document.getElementById("myFormId").submit(); // Submits the form programmatically.
    //    }
    //});

    var expanded = false;
    var DepartmentIds = [];
    function showCheckboxes() {
        var checkboxes = document.getElementById("checkboxes");
        if (!expanded) {
            checkboxes.style.display = "block";
            expanded = true;
        } else {
            checkboxes.style.display = "none";
            expanded = false;
        }
    }
    function updateSelectedValues() {
        debugger;
        // Clear the array before updating it
        var checkboxes = document.querySelectorAll('input[type="checkbox"]');
        for (var i = 0; i < checkboxes.length; i++) {
            if (checkboxes[i].checked) {
                DepartmentIds.push(checkboxes[i].value);
            }
        }
        DepartmentIds = DepartmentIds.filter((value, index, array) => array.indexOf(value) === index);

        console.log(DepartmentIds);
        //  console.log(DepartmentIds);
        //calleditmethod()
    }
    function calleditmethod() {
        var formData = new FormData($('#myFormId')[0]); // Serialize the form data
        debugger;
        // Add the DepartmentIds to the formData
        formData.append("DepartmentIds", DepartmentIds);

        // formData.append("DepartmentIds", DepartmentIds);
        // console.log(formData);


        //var FirstName = document.getElementById("FirstName").value;
        //var LastName = document.getElementById("LastName").value;

        //if (FirstName === null || FirstName.trim() === "") {
        //    alert("FirstName can't be blank");
        //    return false;
        //} else if (LastName === null || LastName.trim() === "") {
        //    alert("LastName can't be blank");
        //    return false;
        //}


        $.ajax({
            url: '/Employee/Edit', // Replace with your controller and action name
            type: 'POST',
            data: formData,
            traditional: true,
            contentType: false,
            processData: false,
            success: function (data) {
                if (data.success) {
                    alert(data.message); // Display the success message
                    // Redirect to the specified URL
                    window.location.href = data.redirect;
                } else {
                    // Handle errors here
                    console.error(data.message);
                }
            },
            error: function (error) {
                // Handle any errors
                console.error(error);
            }
        });
    }
</script>


































